import java.util.*;

// Stock class
class Stock {
    private String symbol;
    private double price;

    public Stock(String symbol, double price) {
        this.symbol = symbol;
        this.price = price;
    }

    public String getSymbol() {
        return symbol;
    }

    public double getPrice() {
        return price;
    }

    public void updatePrice(double newPrice) {
        this.price = newPrice;
    }

    @Override
    public String toString() {
        return symbol + " - $" + price;
    }
}

// Portfolio class
class Portfolio {
    private Map<String, Integer> holdings = new HashMap<>();
    private double balance;

    public Portfolio(double initialBalance) {
        this.balance = initialBalance;
    }

    public void buyStock(Stock stock, int quantity) {
        double cost = stock.getPrice() * quantity;
        if (cost > balance) {
            System.out.println("Not enough balance to buy " + quantity + " shares of " + stock.getSymbol());
            return;
        }
        balance -= cost;
        holdings.put(stock.getSymbol(), holdings.getOrDefault(stock.getSymbol(), 0) + quantity);
        System.out.println("Bought " + quantity + " shares of " + stock.getSymbol());
    }

    public void sellStock(Stock stock, int quantity) {
        if (!holdings.containsKey(stock.getSymbol()) || holdings.get(stock.getSymbol()) < quantity) {
            System.out.println("Not enough shares to sell.");
            return;
        }
        double revenue = stock.getPrice() * quantity;
        balance += revenue;
        holdings.put(stock.getSymbol(), holdings.get(stock.getSymbol()) - quantity);
        if (holdings.get(stock.getSymbol()) == 0) {
            holdings.remove(stock.getSymbol());
        }
        System.out.println("Sold " + quantity + " shares of " + stock.getSymbol());
    }

    public void showPortfolio(Map<String, Stock> market) {
        System.out.println("\n=== Portfolio Summary ===");
        System.out.println("Balance: $" + balance);
        double totalValue = balance;
        for (String symbol : holdings.keySet()) {
            int qty = holdings.get(symbol);
            double stockValue = qty * market.get(symbol).getPrice();
            totalValue += stockValue;
            System.out.println(symbol + " : " + qty + " shares | Value: $" + stockValue);
        }
        System.out.println("Total Portfolio Value: $" + totalValue);
    }
}

// Main trading system
public class StockTradingPlatform {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Market data
        Map<String, Stock> market = new HashMap<>();
        market.put("AAPL", new Stock("AAPL", 150.0));
        market.put("GOOG", new Stock("GOOG", 2800.0));
        market.put("TSLA", new Stock("TSLA", 700.0));
        market.put("AMZN", new Stock("AMZN", 3300.0));

        // Create user portfolio
        Portfolio portfolio = new Portfolio(10000); // starting balance $10,000

        int choice;
        do {
            System.out.println("\n=== Stock Trading Menu ===");
            System.out.println("1. View Market Data");
            System.out.println("2. Buy Stock");
            System.out.println("3. Sell Stock");
            System.out.println("4. View Portfolio");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1:
                    System.out.println("\n--- Market Data ---");
                    for (Stock stock : market.values()) {
                        System.out.println(stock);
                    }
                    break;

                case 2:
                    System.out.print("Enter stock symbol to buy: ");
                    String buySymbol = sc.next().toUpperCase();
                    if (market.containsKey(buySymbol)) {
                        System.out.print("Enter quantity: ");
                        int qty = sc.nextInt();
                        portfolio.buyStock(market.get(buySymbol), qty);
                    } else {
                        System.out.println("Invalid stock symbol.");
                    }
                    break;

                case 3:
                    System.out.print("Enter stock symbol to sell: ");
                    String sellSymbol = sc.next().toUpperCase();
                    if (market.containsKey(sellSymbol)) {
                        System.out.print("Enter quantity: ");
                        int qty = sc.nextInt();
                        portfolio.sellStock(market.get(sellSymbol), qty);
                    } else {
                        System.out.println("Invalid stock symbol.");
                    }
                    break;

                case 4:
                    portfolio.showPortfolio(market);
                    break;

                case 5:
                    System.out.println("Exiting... Thank you for trading!");
                    break;

                default:
                    System.out.println("Invalid choice. Try again.");
            }
        } while (choice != 5);

        sc.close();
    }
}
